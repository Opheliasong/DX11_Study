////////////////////////////////////////////////////////////////////////////////
// Filename: Light.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightintensity;
	float4 color;

	//픽셀 컬러는 텍스쳐의 좌표계와 샘플링방법에 따라서 정한다.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	//조명 방향을 역방향으로 계산한다.
	lightDir = -lightDirection;

	//해당 픽셀에 도달하는 빛의 양을 계산한다.
	lightintensity = saturate(dot(input.normal, lightDir));

	color = saturate(diffuseColor * lightintensity);
	color = color * textureColor;

    return color;
}
